{"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport Select from 'react-select';\nimport { useContext } from 'react';\nimport { ThemeContext } from '../theme-context/ThemeContext';\nimport styles from \"../dropdown/Dropdown.module.scss\";\n//TODO : TS interface\nvar Dropdown = function (props) {\n    var label = props.label, width = props.width, height = props.height, containerClassName = props.containerClassName;\n    var _a = useContext(ThemeContext), theme = _a.theme, toggleTheme = _a.toggleTheme;\n    var customStyles = {\n        control: function (provided) { return (__assign(__assign({}, provided), { border: '1.2px solid #959292', borderRadius: '0.6rem', fontSize: '1.2rem', color: theme.dropdown.color, backgroundColor: theme.dropdown.backgroundColor, width: width !== null && width !== void 0 ? width : '24.8rem', height: height !== null && height !== void 0 ? height : '20px' })); },\n        singleValue: function (provided) { return (__assign(__assign({}, provided), { color: theme.dropdown.color, backgroundColor: theme.dropdown.backgroundColor })); },\n        option: function (styles, _a) {\n            var isFocused = _a.isFocused, isSelected = _a.isSelected;\n            return ({\n                fontSize: '1.2  rem',\n                padding: isFocused ? '8px 16px' : '8px 16px',\n                backgroundColor: isFocused\n                    ? theme.dropdown.isFocused\n                    : theme.dropdown.backgroundColor,\n                color: theme.dropdown.color,\n            });\n        },\n        menu: function (styles) { return (__assign(__assign({}, styles), { color: theme.dropdown.color, backgroundColor: theme.dropdown.backgroundColor })); },\n    };\n    var tempObj = __assign({}, props);\n    delete tempObj.label;\n    delete tempObj.containerClassName;\n    delete tempObj.width;\n    delete tempObj.height;\n    var reactSelectProps = __assign({}, tempObj);\n    return (React.createElement(\"div\", { className: \"\".concat(styles.dropDowncontainerClass, \" \").concat(containerClassName ? containerClassName : '') },\n        label && React.createElement(\"label\", { style: theme.textbox.label }, label),\n        React.createElement(Select, __assign({}, reactSelectProps, { styles: customStyles }))));\n};\nexport default Dropdown;\n","references":["C:/PIRATES/fitknock-ui-kit/node_modules/@types/react/index.d.ts","C:/PIRATES/fitknock-ui-kit/node_modules/react-select/dist/react-select.cjs.d.ts","C:/PIRATES/fitknock-ui-kit/node_modules/@types/react/index.d.ts","C:/PIRATES/fitknock-ui-kit/src/components/theme-context/ThemeContext.tsx","C:/PIRATES/fitknock-ui-kit/src/components/dropdown/Dropdown.types.ts"],"dtsmap":{"name":"C:/PIRATES/fitknock-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/dropdown/Dropdown.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"Dropdown.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/dropdown/Dropdown.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAQ1B,QAAA,MAAM,QAAQ,UAAW,GAAG,sBAsD3B,CAAC;AAEF,eAAe,QAAQ,CAAC\"}"},"dts":{"name":"C:/PIRATES/fitknock-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/dropdown/Dropdown.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\ndeclare const Dropdown: (props: any) => React.JSX.Element;\nexport default Dropdown;\n//# sourceMappingURL=Dropdown.d.ts.map"}}
